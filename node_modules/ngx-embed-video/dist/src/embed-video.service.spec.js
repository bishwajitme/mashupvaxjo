"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var http_1 = require("@angular/http");
var testing_2 = require("@angular/http/testing");
var http_2 = require("@angular/http");
var src_1 = require("../src");
var core_1 = require("@angular/core");
var UsersService = (function (_super) {
    __extends(UsersService, _super);
    function UsersService(http) {
        var _this = _super.call(this, http, 'users', {
            arrayRoot: 'users',
            objectRoot: 'user'
        }) || this;
        _this.http = http;
        return _this;
    }
    return UsersService;
}(src_1.ApiService));
UsersService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof src_1.ApiHttp !== "undefined" && src_1.ApiHttp) === "function" && _a || Object])
], UsersService);
exports.UsersService = UsersService;
describe('UsersService', function () {
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                http_2.HttpModule
            ],
            providers: [
                { provide: http_1.XHRBackend, useClass: testing_2.MockBackend },
                {
                    provide: src_1.ApiHttp,
                    useFactory: function (http) { return new src_1.ApiHttp(new src_1.ApiConfig({ baseUrl: '/api' }), http); },
                    deps: [http_2.Http]
                },
                UsersService,
            ]
        });
    });
    it('should findAll users', testing_1.async(testing_1.inject([UsersService, http_1.XHRBackend], function (usersService, backend) {
        backend.connections.subscribe(function (connection) {
            expect(connection.request.url).toEqual('/api/users');
            expect(connection.request.method).toEqual(http_2.RequestMethod.Get);
            connection.mockRespond(new http_2.Response(new http_2.ResponseOptions({ body: '{"users": [{"id": 1, "name": "Tom"}]}' })));
        });
        usersService.findAll().subscribe(function (users) {
            expect(users).toEqual([{ id: 1, name: 'Tom' }]);
        });
    })));
    it('should find user with id 1', testing_1.async(testing_1.inject([UsersService, http_1.XHRBackend], function (usersService, backend) {
        backend.connections.subscribe(function (connection) {
            expect(connection.request.url).toEqual('/api/users/1');
            expect(connection.request.method).toEqual(http_2.RequestMethod.Get);
            connection.mockRespond(new http_2.Response(new http_2.ResponseOptions({ body: '{"user": {"id": 1, "name": "Tom"}}' })));
        });
        usersService.find(1).subscribe(function (user) {
            expect(user).toEqual({ id: 1, name: 'Tom' });
        });
    })));
});
var _a;
//# sourceMappingURL=embed-video.service.spec.js.map